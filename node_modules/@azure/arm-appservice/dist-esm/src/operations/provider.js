/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing Provider operations. */
export class ProviderImpl {
    /**
     * Initialize a new instance of the class Provider class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Description for Get available application frameworks and their versions
     * @param options The options parameters.
     */
    listAvailableStacks(options) {
        const iter = this.getAvailableStacksPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.getAvailableStacksPagingPage(options);
            }
        };
    }
    getAvailableStacksPagingPage(options) {
        return __asyncGenerator(this, arguments, function* getAvailableStacksPagingPage_1() {
            let result = yield __await(this._getAvailableStacks(options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._getAvailableStacksNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    getAvailableStacksPagingAll(options) {
        return __asyncGenerator(this, arguments, function* getAvailableStacksPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.getAvailableStacksPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Description for Get available Function app frameworks and their versions
     * @param options The options parameters.
     */
    listFunctionAppStacks(options) {
        const iter = this.getFunctionAppStacksPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.getFunctionAppStacksPagingPage(options);
            }
        };
    }
    getFunctionAppStacksPagingPage(options) {
        return __asyncGenerator(this, arguments, function* getFunctionAppStacksPagingPage_1() {
            let result = yield __await(this._getFunctionAppStacks(options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._getFunctionAppStacksNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    getFunctionAppStacksPagingAll(options) {
        return __asyncGenerator(this, arguments, function* getFunctionAppStacksPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.getFunctionAppStacksPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Description for Get available Function app frameworks and their versions for location
     * @param location Function App stack location.
     * @param options The options parameters.
     */
    listFunctionAppStacksForLocation(location, options) {
        const iter = this.getFunctionAppStacksForLocationPagingAll(location, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.getFunctionAppStacksForLocationPagingPage(location, options);
            }
        };
    }
    getFunctionAppStacksForLocationPagingPage(location, options) {
        return __asyncGenerator(this, arguments, function* getFunctionAppStacksForLocationPagingPage_1() {
            let result = yield __await(this._getFunctionAppStacksForLocation(location, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._getFunctionAppStacksForLocationNext(location, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    getFunctionAppStacksForLocationPagingAll(location, options) {
        return __asyncGenerator(this, arguments, function* getFunctionAppStacksForLocationPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = __asyncValues(this.getFunctionAppStacksForLocationPagingPage(location, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Description for Get available Web app frameworks and their versions for location
     * @param location Web App stack location.
     * @param options The options parameters.
     */
    listWebAppStacksForLocation(location, options) {
        const iter = this.getWebAppStacksForLocationPagingAll(location, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.getWebAppStacksForLocationPagingPage(location, options);
            }
        };
    }
    getWebAppStacksForLocationPagingPage(location, options) {
        return __asyncGenerator(this, arguments, function* getWebAppStacksForLocationPagingPage_1() {
            let result = yield __await(this._getWebAppStacksForLocation(location, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._getWebAppStacksForLocationNext(location, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    getWebAppStacksForLocationPagingAll(location, options) {
        return __asyncGenerator(this, arguments, function* getWebAppStacksForLocationPagingAll_1() {
            var e_4, _a;
            try {
                for (var _b = __asyncValues(this.getWebAppStacksForLocationPagingPage(location, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Description for Gets all available operations for the Microsoft.Web resource provider. Also exposes
     * resource metric definitions
     * @param options The options parameters.
     */
    listOperations(options) {
        const iter = this.listOperationsPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listOperationsPagingPage(options);
            }
        };
    }
    listOperationsPagingPage(options) {
        return __asyncGenerator(this, arguments, function* listOperationsPagingPage_1() {
            let result = yield __await(this._listOperations(options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listOperationsNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listOperationsPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listOperationsPagingAll_1() {
            var e_5, _a;
            try {
                for (var _b = __asyncValues(this.listOperationsPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_5) throw e_5.error; }
            }
        });
    }
    /**
     * Description for Get available Web app frameworks and their versions
     * @param options The options parameters.
     */
    listWebAppStacks(options) {
        const iter = this.getWebAppStacksPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.getWebAppStacksPagingPage(options);
            }
        };
    }
    getWebAppStacksPagingPage(options) {
        return __asyncGenerator(this, arguments, function* getWebAppStacksPagingPage_1() {
            let result = yield __await(this._getWebAppStacks(options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._getWebAppStacksNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    getWebAppStacksPagingAll(options) {
        return __asyncGenerator(this, arguments, function* getWebAppStacksPagingAll_1() {
            var e_6, _a;
            try {
                for (var _b = __asyncValues(this.getWebAppStacksPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_6) throw e_6.error; }
            }
        });
    }
    /**
     * Description for Get available application frameworks and their versions
     * @param options The options parameters.
     */
    listAvailableStacksOnPrem(options) {
        const iter = this.getAvailableStacksOnPremPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.getAvailableStacksOnPremPagingPage(options);
            }
        };
    }
    getAvailableStacksOnPremPagingPage(options) {
        return __asyncGenerator(this, arguments, function* getAvailableStacksOnPremPagingPage_1() {
            let result = yield __await(this._getAvailableStacksOnPrem(options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._getAvailableStacksOnPremNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    getAvailableStacksOnPremPagingAll(options) {
        return __asyncGenerator(this, arguments, function* getAvailableStacksOnPremPagingAll_1() {
            var e_7, _a;
            try {
                for (var _b = __asyncValues(this.getAvailableStacksOnPremPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_7) throw e_7.error; }
            }
        });
    }
    /**
     * Description for Get available application frameworks and their versions
     * @param options The options parameters.
     */
    _getAvailableStacks(options) {
        return this.client.sendOperationRequest({ options }, getAvailableStacksOperationSpec);
    }
    /**
     * Description for Get available Function app frameworks and their versions
     * @param options The options parameters.
     */
    _getFunctionAppStacks(options) {
        return this.client.sendOperationRequest({ options }, getFunctionAppStacksOperationSpec);
    }
    /**
     * Description for Get available Function app frameworks and their versions for location
     * @param location Function App stack location.
     * @param options The options parameters.
     */
    _getFunctionAppStacksForLocation(location, options) {
        return this.client.sendOperationRequest({ location, options }, getFunctionAppStacksForLocationOperationSpec);
    }
    /**
     * Description for Get available Web app frameworks and their versions for location
     * @param location Web App stack location.
     * @param options The options parameters.
     */
    _getWebAppStacksForLocation(location, options) {
        return this.client.sendOperationRequest({ location, options }, getWebAppStacksForLocationOperationSpec);
    }
    /**
     * Description for Gets all available operations for the Microsoft.Web resource provider. Also exposes
     * resource metric definitions
     * @param options The options parameters.
     */
    _listOperations(options) {
        return this.client.sendOperationRequest({ options }, listOperationsOperationSpec);
    }
    /**
     * Description for Get available Web app frameworks and their versions
     * @param options The options parameters.
     */
    _getWebAppStacks(options) {
        return this.client.sendOperationRequest({ options }, getWebAppStacksOperationSpec);
    }
    /**
     * Description for Get available application frameworks and their versions
     * @param options The options parameters.
     */
    _getAvailableStacksOnPrem(options) {
        return this.client.sendOperationRequest({ options }, getAvailableStacksOnPremOperationSpec);
    }
    /**
     * GetAvailableStacksNext
     * @param nextLink The nextLink from the previous successful call to the GetAvailableStacks method.
     * @param options The options parameters.
     */
    _getAvailableStacksNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, getAvailableStacksNextOperationSpec);
    }
    /**
     * GetFunctionAppStacksNext
     * @param nextLink The nextLink from the previous successful call to the GetFunctionAppStacks method.
     * @param options The options parameters.
     */
    _getFunctionAppStacksNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, getFunctionAppStacksNextOperationSpec);
    }
    /**
     * GetFunctionAppStacksForLocationNext
     * @param location Function App stack location.
     * @param nextLink The nextLink from the previous successful call to the
     *                 GetFunctionAppStacksForLocation method.
     * @param options The options parameters.
     */
    _getFunctionAppStacksForLocationNext(location, nextLink, options) {
        return this.client.sendOperationRequest({ location, nextLink, options }, getFunctionAppStacksForLocationNextOperationSpec);
    }
    /**
     * GetWebAppStacksForLocationNext
     * @param location Web App stack location.
     * @param nextLink The nextLink from the previous successful call to the GetWebAppStacksForLocation
     *                 method.
     * @param options The options parameters.
     */
    _getWebAppStacksForLocationNext(location, nextLink, options) {
        return this.client.sendOperationRequest({ location, nextLink, options }, getWebAppStacksForLocationNextOperationSpec);
    }
    /**
     * ListOperationsNext
     * @param nextLink The nextLink from the previous successful call to the ListOperations method.
     * @param options The options parameters.
     */
    _listOperationsNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listOperationsNextOperationSpec);
    }
    /**
     * GetWebAppStacksNext
     * @param nextLink The nextLink from the previous successful call to the GetWebAppStacks method.
     * @param options The options parameters.
     */
    _getWebAppStacksNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, getWebAppStacksNextOperationSpec);
    }
    /**
     * GetAvailableStacksOnPremNext
     * @param nextLink The nextLink from the previous successful call to the GetAvailableStacksOnPrem
     *                 method.
     * @param options The options parameters.
     */
    _getAvailableStacksOnPremNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, getAvailableStacksOnPremNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getAvailableStacksOperationSpec = {
    path: "/providers/Microsoft.Web/availableStacks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ApplicationStackCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.osTypeSelected],
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept],
    serializer
};
const getFunctionAppStacksOperationSpec = {
    path: "/providers/Microsoft.Web/functionAppStacks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.FunctionAppStackCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.stackOsType],
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept],
    serializer
};
const getFunctionAppStacksForLocationOperationSpec = {
    path: "/providers/Microsoft.Web/locations/{location}/functionAppStacks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.FunctionAppStackCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.stackOsType1],
    urlParameters: [Parameters.$host, Parameters.location],
    headerParameters: [Parameters.accept],
    serializer
};
const getWebAppStacksForLocationOperationSpec = {
    path: "/providers/Microsoft.Web/locations/{location}/webAppStacks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.WebAppStackCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.stackOsType2],
    urlParameters: [Parameters.$host, Parameters.location],
    headerParameters: [Parameters.accept],
    serializer
};
const listOperationsOperationSpec = {
    path: "/providers/Microsoft.Web/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CsmOperationCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept],
    serializer
};
const getWebAppStacksOperationSpec = {
    path: "/providers/Microsoft.Web/webAppStacks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.WebAppStackCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.stackOsType3],
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept],
    serializer
};
const getAvailableStacksOnPremOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/availableStacks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ApplicationStackCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.osTypeSelected1],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const getAvailableStacksNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ApplicationStackCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.osTypeSelected],
    urlParameters: [Parameters.$host, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer
};
const getFunctionAppStacksNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.FunctionAppStackCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.stackOsType],
    urlParameters: [Parameters.$host, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer
};
const getFunctionAppStacksForLocationNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.FunctionAppStackCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.stackOsType1],
    urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.location],
    headerParameters: [Parameters.accept],
    serializer
};
const getWebAppStacksForLocationNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.WebAppStackCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.stackOsType2],
    urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.location],
    headerParameters: [Parameters.accept],
    serializer
};
const listOperationsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CsmOperationCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer
};
const getWebAppStacksNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.WebAppStackCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.stackOsType3],
    urlParameters: [Parameters.$host, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer
};
const getAvailableStacksOnPremNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ApplicationStackCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.osTypeSelected1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=provider.js.map