"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../config");
const utils_1 = require("../../../core/utils");
const build_1 = require("./build");
function registerCommand(program) {
    program
        .command("build [configName|appLocation]")
        .usage("[configName|appLocation] [options]")
        .description("build your project")
        .option("-a, --app-location <path>", "the folder containing the source code of the front-end application", config_1.DEFAULT_CONFIG.appLocation)
        .option("-i, --api-location <path>", "the folder containing the source code of the API application", config_1.DEFAULT_CONFIG.apiLocation)
        .option("-O, --output-location <path>", "the folder containing the built source of the front-end application", config_1.DEFAULT_CONFIG.outputLocation)
        .option("-A, --app-build-command <command>", "the command used to build your app", config_1.DEFAULT_CONFIG.appBuildCommand)
        .option("-I, --api-build-command <command>", "the command used to build your api", config_1.DEFAULT_CONFIG.apiBuildCommand)
        .option("--auto", "automatically detect how to build your app and api", false)
        .action(async (positionalArg, _options, command) => {
        positionalArg = positionalArg === null || positionalArg === void 0 ? void 0 : positionalArg.trim();
        const options = await (0, utils_1.configureOptions)(positionalArg, command.optsWithGlobals(), command, "build");
        if (positionalArg && !(0, utils_1.matchLoadedConfigName)(positionalArg)) {
            if ((0, utils_1.isUserOption)("appLocation")) {
                utils_1.logger.error(`swa build <appLocation> cannot be when with --app-location option is also set.`);
                utils_1.logger.error(`You either have to use the positional argument or option, not both at the same time.`, true);
            }
            // If it's not the config name, then it's the app location
            options.appLocation = positionalArg;
        }
        await (0, build_1.build)(options);
    });
}
exports.default = registerCommand;
//# sourceMappingURL=register.js.map