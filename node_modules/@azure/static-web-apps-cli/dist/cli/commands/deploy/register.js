"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../../config");
const core_1 = require("../../../core");
const login_1 = require("../login");
const deploy_1 = require("./deploy");
function registerCommand(program) {
    const deployCommand = program
        .command("deploy [configName|outputLocation]")
        .usage("[configName|outputLocation] [options]")
        .description("deploy the current project to Azure Static Web Apps")
        .option("-a, --app-location <path>", "the folder containing the source code of the front-end application", config_1.DEFAULT_CONFIG.appLocation)
        .option("-i, --api-location <path>", "the folder containing the source code of the API application", config_1.DEFAULT_CONFIG.apiLocation)
        .option("-O, --output-location <path>", "the folder containing the built source of the front-end application", config_1.DEFAULT_CONFIG.outputLocation)
        .option("-w, --swa-config-location <swaConfigLocation>", "the directory where the staticwebapp.config.json file is located", config_1.DEFAULT_CONFIG.swaConfigLocation)
        .option("-d, --deployment-token <secret>", "the secret token used to authenticate with the Static Web Apps")
        .option("-dr, --dry-run", "simulate a deploy process without actually running it", config_1.DEFAULT_CONFIG.dryRun)
        .option("-pt, --print-token", "print the deployment token", false)
        .option("--env [environment]", "the type of deployment environment where to deploy the project", config_1.DEFAULT_CONFIG.env)
        .action(async (positionalArg, _options, command) => {
        positionalArg = positionalArg === null || positionalArg === void 0 ? void 0 : positionalArg.trim();
        const options = await (0, core_1.configureOptions)(positionalArg, command.optsWithGlobals(), command, "deploy");
        if (positionalArg && !(0, core_1.matchLoadedConfigName)(positionalArg)) {
            if ((0, core_1.isUserOption)("outputLocation")) {
                core_1.logger.error(`swa deploy <outputLocation> cannot be used when --output-location option is also set.`);
                core_1.logger.error(`You either have to use the positional argument or option, not both at the same time.`, true);
            }
            // If it's not the config name, then it's the output location
            options.outputLocation = positionalArg;
        }
        await (0, deploy_1.deploy)(options);
    })
        .addHelpText("after", `
Examples:

  Deploy using a deployment token
  swa deploy ./dist/ --api-location ./api/ --deployment-token <token>

  Deploy using a deployment token from env
  SWA_CLI_DEPLOYMENT_TOKEN=123 swa deploy ./dist/ --api-location ./api/

  Deploy using swa-cli.config.json file
  swa deploy
  swa deploy myconfig

  Print the deployment token
  swa deploy --print-token

  Deploy to a specific environment
  swa deploy --env production
    `);
    (0, login_1.addSharedLoginOptionsToCommand)(deployCommand);
}
exports.default = registerCommand;
//# sourceMappingURL=register.js.map