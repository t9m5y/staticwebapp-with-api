"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const process_1 = __importDefault(require("process"));
const utils_1 = require("../../../core/utils");
const init_1 = require("./init");
function registerCommand(program) {
    program
        .command("init [configName]")
        .usage("[configName] [options]")
        .description("initialize a new static web app project")
        .option("-y, --yes", "answer yes to all prompts (disable interactive mode)", false)
        .action(async (configName, _options, command) => {
        const options = await (0, utils_1.configureOptions)(undefined, command.optsWithGlobals(), command, "init", false);
        if (configName) {
            if ((0, utils_1.isUserOption)("configName")) {
                utils_1.logger.error(`swa init <configName> cannot be used when --config-name option is also set.`);
                utils_1.logger.error(`You either have to use the positional argument or option, not both at the same time.`, true);
            }
            options.configName = configName;
        }
        await (0, init_1.init)(options, !process_1.default.env.SWA_CLI_INTERNAL_COMMAND);
    });
}
exports.default = registerCommand;
//# sourceMappingURL=register.js.map