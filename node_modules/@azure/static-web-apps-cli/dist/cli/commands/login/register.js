"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addSharedLoginOptionsToCommand = void 0;
const config_1 = require("../../../config");
const core_1 = require("../../../core");
const login_1 = require("./login");
function addSharedLoginOptionsToCommand(command) {
    command
        .option("-S, --subscription-id <subscriptionId>", "Azure subscription ID used by this project", config_1.DEFAULT_CONFIG.subscriptionId)
        .option("-R, --resource-group <resourceGroup>", "Azure resource group used by this project", config_1.DEFAULT_CONFIG.resourceGroup)
        .option("-T, --tenant-id <tenantId>", "Azure tenant ID", config_1.DEFAULT_CONFIG.tenantId)
        .option("-C, --client-id <clientId>", "Azure client ID", config_1.DEFAULT_CONFIG.clientId)
        .option("-CS, --client-secret <clientSecret>", "Azure client secret", config_1.DEFAULT_CONFIG.clientSecret)
        .option("-n, --app-name <appName>", "Azure Static Web App application name", config_1.DEFAULT_CONFIG.appName)
        .option("-CC, --clear-credentials", "clear persisted credentials before login", config_1.DEFAULT_CONFIG.clearCredentials)
        .option("-u, --use-keychain", "enable using the operating system native keychain for persistent credentials", config_1.DEFAULT_CONFIG.useKeychain)
        // Note: Commander does not automatically recognize the --no-* option, so we have to explicitly use --no-use-keychain- instead
        .option("-nu, --no-use-keychain", "disable using the operating system native keychain", !config_1.DEFAULT_CONFIG.useKeychain);
}
exports.addSharedLoginOptionsToCommand = addSharedLoginOptionsToCommand;
function registerCommand(program) {
    const loginCommand = program
        .command("login")
        .usage("[options]")
        .description("login into Azure")
        .action(async (_options, command) => {
        const options = await (0, core_1.configureOptions)(undefined, command.optsWithGlobals(), command, "login");
        await (0, login_1.loginCommand)(options);
    })
        .addHelpText("after", `
Examples:

  Interactive login
  swa login

  Interactive login without persisting credentials
  swa login --no-use-keychain

  Log in into specific tenant
  swa login --tenant-id 00000000-0000-0000-0000-000000000000

  Log in using a specific subscription, resource group or an application
  swa login --subscription-id my-subscription \\
            --resource-group my-resource-group \\
            --app-name my-static-site

  Login using service principal
  swa login --tenant-id 00000000-0000-0000-0000-000000000000 \\
            --client-id 00000000-0000-0000-0000-000000000000 \\
            --client-secret 0000000000000000000000000000000000000000000000000000000000000000
    `);
    addSharedLoginOptionsToCommand(loginCommand);
}
exports.default = registerCommand;
//# sourceMappingURL=register.js.map