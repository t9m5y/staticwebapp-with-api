"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const config_1 = require("../../../config");
const core_1 = require("../../../core");
const start_1 = require("./start");
function registerCommand(program) {
    program
        .command("start [configName|outputLocation|appDevserverUrl]")
        .usage("[configName|outputLocation|appDevserverUrl] [options]")
        .description("start the emulator from a directory or bind to a dev server")
        .option("-a, --app-location <path>", "the folder containing the source code of the front-end application", config_1.DEFAULT_CONFIG.appLocation)
        .option("-i, --api-location <path>", "the folder containing the source code of the API application", config_1.DEFAULT_CONFIG.apiLocation)
        .option("-O, --output-location <path>", "the folder containing the built source of the front-end application", config_1.DEFAULT_CONFIG.outputLocation)
        .option("-D, --app-devserver-url <url>", "connect to the app dev server at this URL instead of using output location", config_1.DEFAULT_CONFIG.appDevserverUrl)
        .option("-is, --api-devserver-url <url>", "connect to the api server at this URL instead of using api location", config_1.DEFAULT_CONFIG.apiDevserverUrl)
        .option("-j, --api-port <apiPort>", "the API server port passed to `func start`", core_1.parsePort, config_1.DEFAULT_CONFIG.apiPort)
        .option("-q, --host <host>", "the host address to use for the CLI dev server", config_1.DEFAULT_CONFIG.host)
        .option("-p, --port <port>", "the port value to use for the CLI dev server", core_1.parsePort, config_1.DEFAULT_CONFIG.port)
        .option("-s, --ssl", "serve the front-end application and API over HTTPS", config_1.DEFAULT_CONFIG.ssl)
        .option("-e, --ssl-cert <sslCertLocation>", "the SSL certificate (.crt) to use when enabling HTTPS", config_1.DEFAULT_CONFIG.sslCert)
        .option("-k, --ssl-key <sslKeyLocation>", "the SSL key (.key) to use when enabling HTTPS", config_1.DEFAULT_CONFIG.sslKey)
        .option("-r, --run <startupScript>", "run a custom shell command or script file at startup", config_1.DEFAULT_CONFIG.run)
        .option("-t, --devserver-timeout <time>", "the time to wait (in seconds) when connecting to a front-end application's dev server or api server", core_1.parseServerTimeout, config_1.DEFAULT_CONFIG.devserverTimeout)
        .option("-w, --swa-config-location <swaConfigLocation>", "the directory where the staticwebapp.config.json file is located", config_1.DEFAULT_CONFIG.swaConfigLocation)
        .option("-o, --open", "open the browser to the dev server", config_1.DEFAULT_CONFIG.open)
        .option("-f, --func-args <funcArgs>", "pass additional arguments to the func start command")
        .action(async (positionalArg, _options, command) => {
        positionalArg = positionalArg === null || positionalArg === void 0 ? void 0 : positionalArg.trim();
        const options = await (0, core_1.configureOptions)(positionalArg, command.optsWithGlobals(), command, "start");
        if (positionalArg && !(0, core_1.matchLoadedConfigName)(positionalArg)) {
            // If it's not the config name, it's either output location or dev server url
            const isUrl = (0, core_1.isHttpUrl)(positionalArg);
            if (isUrl) {
                if ((0, core_1.isUserOption)("appDevserverUrl")) {
                    core_1.logger.error(`swa deploy <appDevserverUrl> cannot be used when --app-devserver-url option is also set.`);
                    core_1.logger.error(`You either have to use the positional argument or option, not both at the same time.`, true);
                }
                options.appDevserverUrl = positionalArg;
            }
            else {
                if ((0, core_1.isUserOption)("outputLocation")) {
                    core_1.logger.error(`swa deploy <outputLocation> cannot be used when --output-location option is also set.`);
                    core_1.logger.error(`You either have to use the positional argument or option, not both at the same time.`, true);
                }
                options.outputLocation = positionalArg;
            }
        }
        console.warn(chalk_1.default.yellow("***********************************************************************"));
        console.warn(chalk_1.default.yellow("* WARNING: This emulator may not match the cloud environment exactly. *"));
        console.warn(chalk_1.default.yellow("* Always deploy and test your app in Azure.                           *"));
        console.warn(chalk_1.default.yellow("***********************************************************************"));
        console.warn();
        await (0, start_1.start)(options);
    })
        .addHelpText("after", `
Examples:

Serve static content from a specific folder
swa start ./output-folder

Connect to an already running framework development server
swa start http://localhost:3000

Use staticwebapp.config.json file from a specific location
swa start http://localhost:3000 --swa-config-location ./app-source

Serve static content from a folder and run an API from another folder
swa start ./output-folder --api-location ./api

Use a custom command to run framework development server at startup
swa start http://localhost:3000 --run-build "npm start"

Connect both front-end and the API to running development server
swa start http://localhost:3000 --api-devserver-url http://localhost:7071
  `);
}
exports.default = registerCommand;
//# sourceMappingURL=register.js.map