"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.swaMagic = exports.run = void 0;
const dotenv_1 = __importDefault(require("dotenv"));
dotenv_1.default.config();
const process_1 = __importDefault(require("process"));
const chalk_1 = __importDefault(require("chalk"));
const commander_1 = require("commander");
const path_1 = __importDefault(require("path"));
const update_notifier_1 = __importDefault(require("update-notifier"));
const config_1 = require("../config");
const core_1 = require("../core");
const deploy_1 = require("./commands/deploy");
const init_1 = require("./commands/init");
const login_1 = require("./commands/login");
const start_1 = require("./commands/start");
const build_1 = require("./commands/build");
const docs_1 = require("./commands/docs");
const prompts_1 = require("../core/prompts");
__exportStar(require("./commands"), exports);
const pkg = require("../../package.json");
function printWelcomeMessage(argv) {
    const args = (argv === null || argv === void 0 ? void 0 : argv.slice(2)) || [];
    const showVersion = args.includes("--version") || args.includes("-v") || args.includes("--ping");
    const hideMessage = process_1.default.env.SWA_CLI_INTERNAL_COMMAND || showVersion;
    if (!hideMessage) {
        // don't use logger here: SWA_CLI_DEBUG is not set yet
        console.log(``);
        console.log(`Welcome to Azure Static Web Apps CLI (${chalk_1.default.green(pkg.version)})`);
        console.log(``);
    }
    if (!showVersion) {
        checkNodeVersion();
    }
}
function checkNodeVersion() {
    const nodeMajorVersion = (0, core_1.getNodeMajorVersion)();
    const minVersion = pkg.engines.node.substring(2, pkg.engines.node.indexOf("."));
    if (nodeMajorVersion < minVersion) {
        core_1.logger.error(`You are using Node ${process_1.default.versions.node} but this version of the CLI requires Node ${minVersion} or higher.`);
        core_1.logger.error(`Please upgrade your Node version.\n`, true);
    }
}
async function run(argv) {
    printWelcomeMessage(argv);
    // Once a day, check for updates
    (0, update_notifier_1.default)({ pkg }).notify();
    commander_1.program
        .name("swa")
        .usage("[command] [options]")
        .version(pkg.version, "-v, --version")
        // SWA CLI common configuration options
        .addOption(new commander_1.Option("-V, --verbose [prefix]", "enable verbose output. Values are: silly,info,log,silent")
        .preset(config_1.DEFAULT_CONFIG.verbose)
        .default(config_1.DEFAULT_CONFIG.verbose))
        .option("-c, --config <path>", "path to swa-cli.config.json file to use", path_1.default.relative(process_1.default.cwd(), core_1.swaCliConfigFilename))
        .option("-cn, --config-name <name>", "name of the configuration to use", undefined)
        .option("-g, --print-config", "print all resolved options", false)
        .action(async (_options, command) => {
        if (_options.ping) {
            try {
                require("child_process").execSync("npx command-line-pong", { stdio: ["inherit", "inherit", "ignore"] });
            }
            catch (e) {
                console.log("pong!");
            }
            return;
        }
        const options = await (0, core_1.configureOptions)(undefined, command.optsWithGlobals(), command, "init");
        swaMagic(options);
    })
        .addHelpText("after", `
  Type "swa" to get started and deploy your project.

  Documentation:
    https://aka.ms/swa/cli-local-development
  `);
    // Register commands
    (0, login_1.registerLogin)(commander_1.program);
    (0, start_1.registerStart)(commander_1.program);
    (0, deploy_1.registerDeploy)(commander_1.program);
    (0, init_1.registerInit)(commander_1.program);
    (0, build_1.registerBuild)(commander_1.program);
    (0, docs_1.registerDocs)(commander_1.program);
    commander_1.program.showHelpAfterError();
    commander_1.program.addOption(new commander_1.Option("--ping").hideHelp());
    await commander_1.program.parseAsync(argv);
}
exports.run = run;
async function swaMagic(_options) {
    try {
        const hasLoadedConfig = (0, core_1.getCurrentSwaCliConfigFromFile)();
        if (!hasLoadedConfig) {
            core_1.logger.log(`${chalk_1.default.cyan("→")} No configuration found, running ${chalk_1.default.cyan("swa init")}...\n`);
            (0, core_1.runCommand)("swa init");
        }
        core_1.logger.log(`${chalk_1.default.cyan("→")} Running ${chalk_1.default.cyan("swa build")}...\n`);
        (0, core_1.runCommand)("swa build");
        core_1.logger.log("");
        const response = await (0, prompts_1.promptOrUseDefault)(false, {
            type: "confirm",
            name: "deploy",
            message: "Do you want to deploy your app now?",
            initial: true,
        });
        if (!response.deploy) {
            core_1.logger.log(`\nWhen you'll be ready to deploy your app, just use ${chalk_1.default.cyan("swa")} again.`);
            return;
        }
        core_1.logger.log(`\n${chalk_1.default.cyan("→")} Running ${chalk_1.default.cyan("swa deploy")}...\n`);
        (0, core_1.runCommand)("swa deploy");
    }
    catch (_) {
        // Pokemon, go catch'em all!
        // (Errors are already caught an displayed in individual commands)
    }
}
exports.swaMagic = swaMagic;
//# sourceMappingURL=index.js.map