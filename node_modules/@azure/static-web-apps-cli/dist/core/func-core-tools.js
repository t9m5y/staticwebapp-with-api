"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeDownloadedCoreTools = exports.getCoreToolsBinary = exports.downloadCoreTools = exports.getLatestCoreToolsRelease = exports.detectTargetCoreToolsVersion = exports.isCoreToolsVersionCompatible = exports.getNodeMajorVersion = void 0;
const os_1 = __importDefault(require("os"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const process_1 = __importDefault(require("process"));
const child_process_1 = require("child_process");
const util_1 = require("util");
const stream_1 = require("stream");
const crypto_1 = __importDefault(require("crypto"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const unzipper_1 = __importDefault(require("unzipper"));
const cli_progress_1 = __importDefault(require("cli-progress"));
const logger_1 = require("./utils/logger");
const RELEASES_FEED_URL = "https://functionscdn.azureedge.net/public/cli-feed-v4.json";
const DEFAULT_FUNC_BINARY = "func";
const VERSION_FILE = ".release-version";
const CORE_TOOLS_FOLDER = ".swa/core-tools";
function getMajorVersion(version) {
    return Number(version.split(".")[0]);
}
function getNodeMajorVersion() {
    return getMajorVersion(process_1.default.versions.node);
}
exports.getNodeMajorVersion = getNodeMajorVersion;
function getCoreToolsDownloadFolder() {
    return path_1.default.join(os_1.default.homedir(), CORE_TOOLS_FOLDER);
}
function getCoreToolsFolder(version) {
    const downloadFolder = getCoreToolsDownloadFolder();
    return path_1.default.join(downloadFolder, `v${version}`);
}
function getCoreToolBinaryPath(version) {
    const folder = getCoreToolsFolder(version);
    return path_1.default.resolve(path_1.default.join(folder, "func"));
}
function isCoreToolsVersionCompatible(coreToolsVersion, nodeVersion) {
    // Runtime support reference: https://docs.microsoft.com/azure/azure-functions/functions-versions?pivots=programming-language-javascript#languages
    switch (coreToolsVersion) {
        case 4:
            return nodeVersion >= 14 && nodeVersion <= 18;
        case 3:
            return nodeVersion >= 10 && nodeVersion <= 14;
        case 2:
            return nodeVersion >= 8 && nodeVersion <= 10;
        default:
            return false;
    }
}
exports.isCoreToolsVersionCompatible = isCoreToolsVersionCompatible;
function detectTargetCoreToolsVersion(nodeVersion) {
    // Pick the highest version that is compatible with the specified Node version
    if (nodeVersion >= 14 && nodeVersion <= 18)
        return 4;
    if (nodeVersion >= 10 && nodeVersion < 14)
        return 3;
    if (nodeVersion >= 8 && nodeVersion < 10)
        return 2;
    // Fallback to the latest version for Unsupported Node version
    return 4;
}
exports.detectTargetCoreToolsVersion = detectTargetCoreToolsVersion;
async function getInstalledSystemCoreToolsVersion() {
    try {
        const { stdout: version } = await (0, util_1.promisify)(child_process_1.exec)(`${DEFAULT_FUNC_BINARY} --version`);
        return getMajorVersion(version);
    }
    catch {
        return undefined;
    }
}
function getDownloadedCoreToolsVersion(targetVersion) {
    const folder = getCoreToolsFolder(targetVersion);
    if (!fs_1.default.existsSync(folder)) {
        return undefined;
    }
    const versionFile = path_1.default.join(folder, VERSION_FILE);
    if (!fs_1.default.existsSync(versionFile)) {
        // Cannot detect downloaded version, in doubt cleanup the folder
        removeDownloadedCoreTools(targetVersion);
        return undefined;
    }
    return fs_1.default.readFileSync(versionFile, "utf8");
}
function getPlatform() {
    switch (os_1.default.platform()) {
        case "win32":
            return "Windows";
        case "darwin":
            return "MacOS";
        case "linux":
            return "Linux";
        default:
            throw new Error(`Unsupported platform: ${os_1.default.platform()}`);
    }
}
async function getLatestCoreToolsRelease(targetVersion) {
    try {
        const response = await (0, node_fetch_1.default)(RELEASES_FEED_URL);
        const feed = (await response.json());
        const tag = feed.tags[`v${targetVersion}`];
        if (!tag || tag.hidden) {
            throw new Error(`Cannot find the latest version for v${targetVersion}`);
        }
        const release = feed.releases[tag.release];
        if (!release) {
            throw new Error(`Cannot find release for ${tag.release}`);
        }
        const coreTools = release.coreTools.filter((t) => t.size === "full");
        const platform = getPlatform();
        const info = coreTools.find((t) => t.OS === platform);
        if (!info) {
            throw new Error(`Cannot find download package for ${platform}`);
        }
        return {
            version: tag.release,
            url: info.downloadLink,
            sha2: info.sha2,
        };
    }
    catch (error) {
        throw new Error(`Error fetching Function Core Tools releases: ${error.message}`);
    }
}
exports.getLatestCoreToolsRelease = getLatestCoreToolsRelease;
async function downloadAndUnzipPackage(release, dest) {
    var _a, _b;
    const progressBar = new cli_progress_1.default.Bar({
        format: "{bar} {percentage}% | ETA: {eta}s",
    }, cli_progress_1.default.Presets.shades_classic);
    try {
        const response = await (0, node_fetch_1.default)(release.url);
        const totalSize = Number(response.headers.get("content-length"));
        let downloadedSize = 0;
        let since = Date.now();
        progressBar.start(totalSize, downloadedSize);
        const bodyStream1 = (_a = response === null || response === void 0 ? void 0 : response.body) === null || _a === void 0 ? void 0 : _a.pipe(new stream_1.PassThrough());
        const bodyStream2 = (_b = response === null || response === void 0 ? void 0 : response.body) === null || _b === void 0 ? void 0 : _b.pipe(new stream_1.PassThrough());
        bodyStream2 === null || bodyStream2 === void 0 ? void 0 : bodyStream2.on("data", (chunk) => {
            downloadedSize += chunk.length;
            const now = Date.now();
            if (now - since > 100) {
                progressBar.update(downloadedSize);
                since = now;
            }
        });
        const unzipPromise = new Promise((resolve, reject) => {
            const unzipperInstance = unzipper_1.default.Extract({ path: dest });
            unzipperInstance.promise().then(resolve, reject);
            bodyStream2 === null || bodyStream2 === void 0 ? void 0 : bodyStream2.pipe(unzipperInstance);
        });
        const hash = await new Promise((resolve) => {
            const hash = crypto_1.default.createHash("sha256");
            hash.setEncoding("hex");
            bodyStream1 === null || bodyStream1 === void 0 ? void 0 : bodyStream1.on("end", () => {
                hash.end();
                resolve(hash.read());
            });
            bodyStream1 === null || bodyStream1 === void 0 ? void 0 : bodyStream1.pipe(hash);
        });
        await unzipPromise;
        if (hash !== release.sha2) {
            throw new Error(`Downloaded Core Tools SHA2 mismatch: expected ${hash}, got ${release.sha2}`);
        }
    }
    finally {
        progressBar.stop();
    }
}
async function downloadCoreTools(version) {
    const dest = getCoreToolsFolder(version);
    const release = await getLatestCoreToolsRelease(version);
    // Make sure we start from a clean folder
    if (fs_1.default.existsSync(dest)) {
        removeDownloadedCoreTools(version);
    }
    else {
        fs_1.default.mkdirSync(dest, { recursive: true });
    }
    try {
        await downloadAndUnzipPackage(release, dest);
    }
    catch (error) {
        // Clean up the folder if the download failed
        removeDownloadedCoreTools(version);
        throw error;
    }
    // Fix permissions on MacOS/Linux
    if (os_1.default.platform() === "linux" || os_1.default.platform() === "darwin") {
        fs_1.default.chmodSync(path_1.default.join(dest, "func"), 0o755);
        fs_1.default.chmodSync(path_1.default.join(dest, "gozip"), 0o755);
    }
    fs_1.default.writeFileSync(path_1.default.join(dest, VERSION_FILE), release.version);
    return release.version;
}
exports.downloadCoreTools = downloadCoreTools;
async function getCoreToolsBinary() {
    const nodeVersion = getNodeMajorVersion();
    const systemVersion = await getInstalledSystemCoreToolsVersion();
    if (systemVersion && isCoreToolsVersionCompatible(systemVersion, nodeVersion)) {
        return DEFAULT_FUNC_BINARY;
    }
    const targetVersion = detectTargetCoreToolsVersion(nodeVersion);
    const downloadedVersion = getDownloadedCoreToolsVersion(targetVersion);
    if (downloadedVersion) {
        // Should we check for newer versions here?
        return getCoreToolBinaryPath(targetVersion);
    }
    if (systemVersion && systemVersion !== targetVersion) {
        logger_1.logger.warn(`Functions Core Tools version mismatch. Detected v${systemVersion} but requires v${targetVersion}`);
        logger_1.logger.warn(`Downloading v${targetVersion}...`);
    }
    if (!systemVersion) {
        logger_1.logger.warn(`Functions Core Tools not detected. Downloading v${targetVersion}...`);
    }
    try {
        await downloadCoreTools(targetVersion);
        logger_1.logger.log(`\nDownloaded Function Core Tools successfully`);
        return getCoreToolBinaryPath(targetVersion);
    }
    catch (error) {
        logger_1.logger.error(`Failed to download Functions Core Tools v${targetVersion}.`);
        logger_1.logger.error(error);
        console.log(error);
        return undefined;
    }
}
exports.getCoreToolsBinary = getCoreToolsBinary;
function removeDownloadedCoreTools(version) {
    // If not specified, remove all versions
    const folder = version ? getCoreToolsFolder(version) : getCoreToolsDownloadFolder();
    if (fs_1.default.existsSync(folder)) {
        const rm = fs_1.default.rmSync ? fs_1.default.rmSync : fs_1.default.rmdirSync;
        rm(folder, { recursive: true });
    }
}
exports.removeDownloadedCoreTools = removeDownloadedCoreTools;
//# sourceMappingURL=func-core-tools.js.map