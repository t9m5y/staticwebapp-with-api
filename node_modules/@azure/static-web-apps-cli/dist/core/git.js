"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateGitIgnore = exports.isGitProject = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const utils_1 = require("./utils");
const { readFile, writeFile } = fs_1.default.promises;
async function isGitProject() {
    const gitFolder = path_1.default.join(process.cwd(), ".git");
    return fs_1.default.existsSync(gitFolder);
}
exports.isGitProject = isGitProject;
async function updateGitIgnore(entry) {
    if (!entry) {
        return false;
    }
    if (!isGitProject()) {
        utils_1.logger.silly(`Not a git project. Skip updating .gitignore`);
        return false;
    }
    const gitIgnoreFile = path_1.default.join(process.cwd(), ".gitignore");
    const gitIgnoreFileExists = fs_1.default.existsSync(gitIgnoreFile);
    if (!gitIgnoreFileExists) {
        utils_1.logger.silly(`No .gitignore file found. Skip updating .gitignore`);
        return false;
    }
    const gitIgnoreFileContent = await readFile(gitIgnoreFile, "utf8");
    const gitIgnoreFileLines = gitIgnoreFileContent.length ? gitIgnoreFileContent.split("\n") : [];
    const gitIgnoreFileLinesBeforeUpdate = gitIgnoreFileLines.length;
    if (!gitIgnoreFileContent.includes(entry)) {
        utils_1.logger.silly(`Adding entry to .gitignore`);
        gitIgnoreFileLines.push(entry);
    }
    const gitIgnoreFileContentWithProjectDetails = gitIgnoreFileLines.join("\n");
    await writeFile(gitIgnoreFile, gitIgnoreFileContentWithProjectDetails, "utf8");
    if (gitIgnoreFileLinesBeforeUpdate < gitIgnoreFileLines.length) {
        return true;
    }
    return false;
}
exports.updateGitIgnore = updateGitIgnore;
//# sourceMappingURL=git.js.map