"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.confirmChooseRandomPort = exports.chooseStaticSite = exports.chooseSubscription = exports.chooseTenant = exports.chooseProjectName = exports.wouldYouLikeToOverrideStaticSite = exports.wouldYouLikeToCreateStaticSite = exports.promptOrUseDefault = void 0;
const chalk_1 = __importDefault(require("chalk"));
const prompts_1 = __importDefault(require("prompts"));
const utils_1 = require("./utils");
async function promptOrUseDefault(disablePrompts, questions, options) {
    if (disablePrompts) {
        const response = {};
        questions = Array.isArray(questions) ? questions : [questions];
        for (const question of questions) {
            response[question.name] = question.initial;
        }
        return response;
    }
    return (0, prompts_1.default)(questions, { ...options, onCancel: onCancelPrompt });
}
exports.promptOrUseDefault = promptOrUseDefault;
function onCancelPrompt() {
    utils_1.logger.error("Operation canceled. Exit.\n", true);
}
async function wouldYouLikeToCreateStaticSite() {
    const response = await promptOrUseDefault(false, {
        type: "confirm",
        name: "value",
        message: "Would you like to create a new Azure Static Web Apps project?",
        initial: true,
    });
    return response.value;
}
exports.wouldYouLikeToCreateStaticSite = wouldYouLikeToCreateStaticSite;
async function wouldYouLikeToOverrideStaticSite(appNameToOverride) {
    const response = await promptOrUseDefault(false, {
        type: "text",
        name: "value",
        message: `Project already exist! Enter project name to override:`,
        warn: `Previous deployment in project "${appNameToOverride}" will be overwritten.`,
        initial: "Press CTRL+L to cancel and exit",
        validate: (value) => {
            if (value === appNameToOverride) {
                return true;
            }
            return `Confirmation doesn't match project name!`;
        },
    });
    return response.value;
}
exports.wouldYouLikeToOverrideStaticSite = wouldYouLikeToOverrideStaticSite;
async function chooseProjectName(initial, maxLength) {
    const response = await promptOrUseDefault(false, {
        type: "text",
        name: "projectName",
        message: "Choose a project name:",
        initial,
        validate: (value) => {
            if (value.trim() === "") {
                return "Project name cannot be empty";
            }
            else if (value.trim().length > maxLength) {
                return `Project name cannot be longer than ${maxLength} characters!`;
            }
            return true;
        },
        format: (value) => (0, utils_1.dasherize)(value.trim()),
    });
    return response.projectName;
}
exports.chooseProjectName = chooseProjectName;
async function chooseTenant(tenants, initial) {
    const choices = tenants.map((tenant) => ({
        title: tenant.tenantId,
        value: tenant,
    }));
    const response = await promptOrUseDefault(false, {
        type: "select",
        name: "Tenant",
        message: "Choose your tenant",
        initial,
        choices,
    });
    return response.Tenant;
}
exports.chooseTenant = chooseTenant;
async function chooseSubscription(subscriptions, initial) {
    const choices = subscriptions.map((subscription) => ({
        title: subscription.displayName,
        value: subscription,
    }));
    const response = await promptOrUseDefault(false, {
        type: "select",
        name: "Subscription",
        message: "Choose your subscription",
        choices,
        initial,
    });
    return response.Subscription;
}
exports.chooseSubscription = chooseSubscription;
async function chooseStaticSite(staticSites, initial) {
    utils_1.logger.silly(`choose static site with initial: ${initial}`);
    let choices = staticSites.map((staticSite) => {
        var _d;
        return ({
            // format as "resource-group/app-name"
            title: `${chalk_1.default.gray(((_d = staticSite.id) === null || _d === void 0 ? void 0 : _d.split("/")[4]) + "/")}${staticSite.name}`,
            value: staticSite.name,
        });
    });
    // allow users to create a new static site
    choices = [
        {
            title: chalk_1.default.green(">> Create a new application"),
            value: "NEW",
        },
        ...choices,
    ];
    const response = await promptOrUseDefault(false, {
        type: "select",
        name: "staticSite",
        message: "Choose your Static Web App",
        initial: (_a, _b, _c) => {
            // Note: in case of a select prompt, initial is always an index
            const index = choices.findIndex((choice) => choice.value === initial);
            return index === -1 ? 0 : index;
        },
        choices,
    });
    return response.staticSite;
}
exports.chooseStaticSite = chooseStaticSite;
async function confirmChooseRandomPort(initial) {
    const response = await promptOrUseDefault(false, {
        type: "confirm",
        name: "confirm",
        message: "Would you like to start the emulator on a different port?",
        initial,
    });
    return response.confirm;
}
exports.confirmChooseRandomPort = confirmChooseRandomPort;
//# sourceMappingURL=prompts.js.map