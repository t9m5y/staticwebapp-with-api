"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMachineId = void 0;
const crypto_1 = __importDefault(require("crypto"));
const os_1 = require("os");
const utils_1 = require("../../utils");
let machineId;
/**
 * Generate a 32-byte machine id.
 *
 * @returns {Promise<string>} A 32-byte machine id.
 */
async function getMachineId() {
    if (!machineId) {
        machineId = (async () => {
            return (await getMacMachineId()) || crypto_1.default.randomBytes(20).toString("hex");
        })();
    }
    return machineId;
}
exports.getMachineId = getMachineId;
/**
 * Get the mac address of the machine and hash it.
 * @returns {Promise<string>} A 32-byte hash of the mac address.
 */
async function getMacMachineId() {
    try {
        const macAddress = getMac();
        return crypto_1.default.createHash("shake256", { outputLength: 16 /* 32 byts */ }).update(macAddress, "utf8").digest("hex");
    }
    catch (err) {
        utils_1.logger.error(err);
        return undefined;
    }
}
const invalidMacAddresses = new Set(["00:00:00:00:00:00", "ff:ff:ff:ff:ff:ff", "ac:de:48:00:11:22"]);
function validateMacAddress(candidate) {
    const tempCandidate = candidate.replace(/\-/g, ":").toLowerCase();
    return !invalidMacAddresses.has(tempCandidate);
}
function getMac() {
    const ifaces = (0, os_1.networkInterfaces)();
    for (let name in ifaces) {
        const networkInterface = ifaces[name];
        if (networkInterface) {
            for (const { mac } of networkInterface) {
                if (validateMacAddress(mac)) {
                    return mac;
                }
            }
        }
    }
    throw new Error("Unable to retrieve mac address (unexpected format)");
}
//# sourceMappingURL=machine-identifier.js.map