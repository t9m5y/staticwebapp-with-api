"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeConfigFile = exports.updateSwaCliConfigFile = exports.hasConfigurationNameInConfigFile = exports.getConfigFileOptions = exports.matchLoadedConfigName = exports.swaCliConfigFileExists = exports.getCurrentSwaCliConfigFromFile = exports.swaCliConfigFilename = exports.swaCliConfigSchemaUrl = void 0;
const chalk_1 = __importDefault(require("chalk"));
const fs_1 = require("fs");
const path = __importStar(require("path"));
const process = __importStar(require("process"));
const logger_1 = require("./logger");
const { readFile, writeFile } = fs_1.promises;
exports.swaCliConfigSchemaUrl = "https://aka.ms/azure/static-web-apps-cli/schema";
exports.swaCliConfigFilename = "swa-cli.config.json";
/**
 * Holds the current configuration of the CLI loaded from the `swa-cli.config.json` file.
 */
let currentSwaCliConfigFromFile;
/**
 * Get the current configuration of the CLI stored in `{@link currentSwaCliConfigFromFile}`.
 *
 * @returns The current configuration of the CLI loaded from the `swa-cli.config.json` file.
 */
const getCurrentSwaCliConfigFromFile = () => currentSwaCliConfigFromFile;
exports.getCurrentSwaCliConfigFromFile = getCurrentSwaCliConfigFromFile;
/**
 * Checks if the given configuration file exists.
 *
 * @param configFilePath The path to the config file.
 * @returns True if the config file exists. False otherwise.
 */
const swaCliConfigFileExists = (configFilePath) => (0, fs_1.existsSync)(configFilePath);
exports.swaCliConfigFileExists = swaCliConfigFileExists;
/**
 * Checks if the specified value match the loaded configuration name.
 *
 * @param name The name to check.
 * @returns True if the config loaded matches the name, false otherwise.
 */
function matchLoadedConfigName(name) {
    const configName = currentSwaCliConfigFromFile === null || currentSwaCliConfigFromFile === void 0 ? void 0 : currentSwaCliConfigFromFile.name;
    return configName && configName === name;
}
exports.matchLoadedConfigName = matchLoadedConfigName;
/**
 * Loads the configuration from the `swa-cli.config.json` file (if available).
 *
 * @param configName The name of the configuration to load.
 * @param configFilePath The path to the `swa-cli.config.json` file.
 * @returns An object with the `{@link SWACLIOptions}` config or an empty object if the config file, or the config entry were not found.
 */
async function getConfigFileOptions(configName, configFilePath) {
    var _a;
    logger_1.logger.silly(`Getting config file options from ${configFilePath}...`);
    configFilePath = path.resolve(configFilePath);
    if (!(0, exports.swaCliConfigFileExists)(configFilePath)) {
        logger_1.logger.silly(`Config file does not exist at ${configFilePath}`);
        return {};
    }
    const cliConfig = await tryParseSwaCliConfig(configFilePath);
    if (!cliConfig.configurations) {
        logger_1.logger.warn(`${exports.swaCliConfigFilename} is missing the "configurations" property. No options will be loaded.`);
        return {};
    }
    // Use configuration root path as the outputLocation
    const configDir = path.dirname(configFilePath);
    process.chdir(configDir);
    logger_1.logger.silly(`Changed directory to ${configDir}`);
    if (!configName) {
        const hasMultipleConfig = Object.entries(cliConfig.configurations).length > 1;
        if (hasMultipleConfig) {
            // Show as a log not warning because the user may want to use the default config
            logger_1.logger.log(`Multiple configurations found in "${exports.swaCliConfigFilename}", but none was specified.`);
            logger_1.logger.log(`Specify which configuration to use with "swa <command> --config-name <configName>"\n`);
        }
        const [configName, config] = Object.entries(cliConfig.configurations)[0];
        printConfigMsg(configName, configFilePath);
        currentSwaCliConfigFromFile = {
            name: configName,
            filePath: configFilePath,
            config,
        };
        return { ...config };
    }
    const config = (_a = cliConfig.configurations) === null || _a === void 0 ? void 0 : _a[configName];
    if (config) {
        logger_1.logger.silly(`Found configuration "${configName}" in "${exports.swaCliConfigFilename}"`);
        printConfigMsg(configName, configFilePath);
        currentSwaCliConfigFromFile = {
            name: configName,
            filePath: configFilePath,
            config,
        };
        return { ...config };
    }
    return {};
}
exports.getConfigFileOptions = getConfigFileOptions;
/**
 * Parse the `swa-cli.config.json` file and return the parsed object.
 *
 * @param configFilePath The path to the `swa-cli.config.json` file.
 * @returns The parsed `swa-cli.config.json` file.
 * @throws If the file cannot be parsed.
 */
async function tryParseSwaCliConfig(configFilePath) {
    try {
        return JSON.parse((await readFile(configFilePath)).toString("utf-8"));
    }
    catch (e) {
        logger_1.logger.error(`Error parsing swa-cli.config.json file at ${configFilePath}`);
        if (e instanceof Error) {
            logger_1.logger.error(e);
        }
        return {};
    }
}
/**
 * Prints a message to the console indicating which configuration was used.
 *
 * @param name The name of the configuration.
 * @param configFilePath The path to the `swa-cli.config.json` file.
 */
function printConfigMsg(name, configFilePath) {
    if (!process.env.SWA_CLI_INTERNAL_COMMAND) {
        logger_1.logger.log(`Using configuration "${name}" from file:`);
        logger_1.logger.log(chalk_1.default.green(`  ${configFilePath}`));
        logger_1.logger.log("");
    }
}
/**
 * Checks if the config file contains a configuration entry with the given name.
 * @param configFilePath The path to the `swa-cli.config.json` file.
 * @param name The name of the configuration entry.
 * @returns True if the config file contains a configuration entry with the given name. False otherwise.
 */
async function hasConfigurationNameInConfigFile(configFilePath, name) {
    var _a;
    const configJson = await tryParseSwaCliConfig(configFilePath);
    return ((_a = configJson.configurations) === null || _a === void 0 ? void 0 : _a[name]) !== undefined;
}
exports.hasConfigurationNameInConfigFile = hasConfigurationNameInConfigFile;
/**
 * Writes the current configuration ({@link currentSwaCliConfigFromFile}) to the `swa-cli.config.json` file.
 *
 * @param config The configuration object to save.
 */
async function updateSwaCliConfigFile(config) {
    const currentSwaCliConfigFromFile = (0, exports.getCurrentSwaCliConfigFromFile)();
    if (currentSwaCliConfigFromFile === undefined) {
        logger_1.logger.error("No configuration file currently loaded", true);
    }
    else {
        logger_1.logger.silly(`Updating configuration file at ${currentSwaCliConfigFromFile.filePath}`);
        await writeConfigFile(currentSwaCliConfigFromFile.filePath, currentSwaCliConfigFromFile.name, config);
    }
}
exports.updateSwaCliConfigFile = updateSwaCliConfigFile;
/**
 * Appends or update the given configuration entry to the `swa-cli.config.json` file.
 *
 * @param configFilePath The path to the `swa-cli.config.json` file.
 * @param configName The name of the configuration entry to be added or updated.
 * @param config The configuration object to save.
 */
async function writeConfigFile(configFilePath, configName, config) {
    let configFile = {
        // TODO: find node_modules/ path and use local schema if found
        $schema: exports.swaCliConfigSchemaUrl,
        configurations: {},
    };
    if ((0, exports.swaCliConfigFileExists)(configFilePath)) {
        logger_1.logger.silly(`Loading existing swa-cli.config.json file at ${configFilePath}`);
        try {
            const configJson = await readFile(configFilePath, "utf-8");
            configFile = JSON.parse(configJson);
        }
        catch (error) {
            logger_1.logger.error(`Error parsing ${configFilePath}`);
            if (error instanceof Error) {
                logger_1.logger.error(error);
            }
            logger_1.logger.error("Cannot update existing configuration file.");
            logger_1.logger.error("Please fix or delete your swa-cli.config.json file and try again.");
            return;
        }
    }
    if (typeof configFile !== "object" || configFile.constructor !== Object) {
        logger_1.logger.error(`Error parsing ${configFilePath}`);
        logger_1.logger.error("Invalid configuration content found.");
        logger_1.logger.error("Please fix or delete your swa-cli.config.json file and try again.");
        return;
    }
    if (configFile.configurations === undefined) {
        logger_1.logger.silly(`Creating "configurations" property in swa-cli.config.json file at ${configFilePath}`);
        configFile.configurations = {};
    }
    configFile.configurations[configName] = config;
    try {
        logger_1.logger.silly(`Writing configuration "${configName}" to swa-cli.config.json`);
        logger_1.logger.silly(config);
        await writeFile(configFilePath, JSON.stringify(configFile, null, 2));
    }
    catch (error) {
        logger_1.logger.error(`Error writing configuration to ${configFilePath}`);
        if (error instanceof Error) {
            logger_1.logger.error(error);
        }
    }
}
exports.writeConfigFile = writeConfigFile;
//# sourceMappingURL=cli-config.js.map