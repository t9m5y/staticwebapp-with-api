"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeCookie = exports.serializeCookie = exports.validateCookie = void 0;
const chalk_1 = __importDefault(require("chalk"));
const cookie_1 = __importDefault(require("cookie"));
const constants_1 = require("../constants");
const logger_1 = require("./logger");
/**
 * Check if the StaticWebAppsAuthCookie is available.
 * @param cookieValue The cookie value.
 * @returns True if StaticWebAppsAuthCookie is found. False otherwise.
 */
function validateCookie(cookieValue) {
    if (typeof cookieValue !== "string") {
        throw Error(`TypeError: cookie value must be a string`);
    }
    const cookies = cookie_1.default.parse(cookieValue);
    return !!cookies[constants_1.SWA_AUTH_COOKIE];
}
exports.validateCookie = validateCookie;
/**
 * Serialize a cookie name-value pair into a string that can be used in Set-Cookie header.
 * @param cookieName The name for the cookie.
 * @param cookieValue The value to set the cookie to.
 * @param options An object containing serialization options
 * @throws {TypeError} when maxAge options is invalid.
 * @returns The serialized value.
 */
function serializeCookie(cookieName, cookieValue, options) {
    return cookie_1.default.serialize(cookieName, cookieValue, options);
}
exports.serializeCookie = serializeCookie;
/**
 *
 * @param cookieValue
 * @returns A ClientPrincipal object.
 */
function decodeCookie(cookieValue) {
    logger_1.logger.silly(`decoding cookie`);
    const cookies = cookie_1.default.parse(cookieValue);
    if (cookies[constants_1.SWA_AUTH_COOKIE]) {
        const decodedValue = Buffer.from(cookies[constants_1.SWA_AUTH_COOKIE], "base64").toString();
        logger_1.logger.silly(` - StaticWebAppsAuthCookie: ${chalk_1.default.yellow(decodedValue)}`);
        return JSON.parse(decodedValue);
    }
    logger_1.logger.silly(` - no cookie 'StaticWebAppsAuthCookie' found`);
    return null;
}
exports.decodeCookie = decodeCookie;
//# sourceMappingURL=cookie.js.map