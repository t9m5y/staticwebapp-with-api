"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findUpPackageJsonDir = exports.pathExists = exports.safeReadFile = exports.safeReadJson = void 0;
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const logger_1 = require("./logger");
const strings_1 = require("./strings");
async function safeReadJson(path) {
    try {
        let contents = await fs_1.promises.readFile(path, "utf8");
        contents = (0, strings_1.stripJsonComments)(contents);
        return JSON.parse(contents);
    }
    catch (error) {
        logger_1.logger.warn(`Failed to read JSON file at: ${path}`);
        return undefined;
    }
}
exports.safeReadJson = safeReadJson;
async function safeReadFile(path) {
    if (!path) {
        return undefined;
    }
    try {
        return await fs_1.promises.readFile(path, "utf8");
    }
    catch (error) {
        logger_1.logger.warn(`Failed to read file at: ${path}`);
        return undefined;
    }
}
exports.safeReadFile = safeReadFile;
async function pathExists(path) {
    try {
        await fs_1.promises.access(path);
        return true;
    }
    catch {
        return false;
    }
}
exports.pathExists = pathExists;
// Look for a package.json file starting from startPath up to rootPath,
// and return its containing directory.
// Note that startPath is relative to rootPath.
async function findUpPackageJsonDir(rootPath, startPath) {
    if (!rootPath || !startPath) {
        return undefined;
    }
    rootPath = rootPath === "." || rootPath === `.${path_1.default.sep}` ? "" : rootPath;
    startPath = path_1.default.join(rootPath, startPath);
    const rootPathLength = rootPath.split(/[/\\]/).filter((c) => c).length;
    const find = async (components) => {
        if (components.length === 0 || components.length < rootPathLength) {
            return undefined;
        }
        const dir = path_1.default.join(...components);
        const packageFile = path_1.default.join(dir, "package.json");
        return (await pathExists(packageFile)) ? dir : find(components.slice(0, -1));
    };
    const components = startPath.split(/[/\\]/).filter((c) => c);
    return find(components);
}
exports.findUpPackageJsonDir = findUpPackageJsonDir;
//# sourceMappingURL=file.js.map