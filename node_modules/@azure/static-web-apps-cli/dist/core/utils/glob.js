"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isBalancedCurlyBrackets = exports.isValidGlobExpression = exports.globToRegExp = void 0;
const chalk_1 = __importDefault(require("chalk"));
const logger_1 = require("./logger");
/**
 * Turn expression into a valid regexp
 *
 * @param glob A string containing a valid wildcard expression
 * @returns a string containing a valid RegExp
 */
function globToRegExp(glob) {
    logger_1.logger.silly(`turning glob expression into valid RegExp`);
    logger_1.logger.silly(` - glob: ${chalk_1.default.yellow(glob)}`);
    if (!glob) {
        logger_1.logger.silly(` - glob is empty, return empty string`);
        return "";
    }
    if (glob === "*") {
        logger_1.logger.silly(` - glob is ${chalk_1.default.yellow("*")}, return ${chalk_1.default.yellow(".*")}`);
        return ".*";
    }
    const filesExtensionMatch = glob.match(/{.*}/);
    if (filesExtensionMatch) {
        const filesExtensionExpression = filesExtensionMatch[0];
        if (filesExtensionExpression) {
            // build a regex group (png|jpg|gif)
            const filesExtensionRegEx = filesExtensionExpression.replace(/\,/g, "|").replace("{", "(").replace("}", ")");
            glob = glob.replace(filesExtensionExpression, filesExtensionRegEx);
        }
    }
    return glob.replace(/\//g, "\\/").replace("*.", ".*").replace("/*", "/.*");
}
exports.globToRegExp = globToRegExp;
/**
 * Check if the route rule contains a valid wildcard expression
 *
 * @param glob A string containing a valid wildcard expression
 * @returns true if the glob expression is valid, false otherwise
 * @see https://docs.microsoft.com/azure/static-web-apps/configuration#wildcards
 */
function isValidGlobExpression(glob) {
    logger_1.logger.silly(`checking if glob expression is valid`);
    logger_1.logger.silly(` - glob: ${chalk_1.default.yellow(glob)}`);
    if (!glob) {
        logger_1.logger.silly(` - glob is empty. Return false`);
        return false;
    }
    if (glob === "*") {
        logger_1.logger.silly(` - glob is *`);
        return true;
    }
    const hasWildcard = glob.includes("*");
    if (hasWildcard) {
        const paths = glob.split("*");
        if (paths.length > 2) {
            logger_1.logger.silly(` - glob has more than one wildcard. Return false`);
            return false;
        }
        const pathBeforeWildcard = paths[0];
        if (pathBeforeWildcard && glob.endsWith("*")) {
            logger_1.logger.silly(` - glob ends with *. Return true`);
            return true;
        }
        const pathAfterWildcard = paths[1];
        if (pathAfterWildcard) {
            logger_1.logger.silly(` - pathAfterWildcard: ${chalk_1.default.yellow(pathAfterWildcard)}`);
            if (isBalancedCurlyBrackets(glob) === false) {
                logger_1.logger.silly(` - pathAfterWildcard contains unbalanced { } syntax. Return false`);
                return false;
            }
            // match exactly extensions of type:
            // -->  /blog/*.html
            // --> /blog/*.{html,jpg}
            const filesExtensionMatch = pathAfterWildcard.match(/\.(\w+|\{\w+(,\w+)*\})$/);
            if (filesExtensionMatch) {
                logger_1.logger.silly(`  - pathAfterWildcard match a file extension. Return true`);
                return true;
            }
            else {
                logger_1.logger.silly(`  - pathAfterWildcard doesn't match a file extension. Return false`);
                return false;
            }
        }
    }
    return false;
}
exports.isValidGlobExpression = isValidGlobExpression;
/**
 * Checks if a string expression has balanced curly brackets
 *
 * @param str the string expression to be checked
 * @returns true if the string expression has balanced curly brackets, false otherwise
 */
function isBalancedCurlyBrackets(str) {
    const stack = [];
    for (let i = 0; i < str.length; i++) {
        const char = str[i];
        if (char === "{") {
            stack.push(char);
        }
        else if (char === "}") {
            if (stack.length === 0) {
                return false;
            }
            stack.pop();
        }
    }
    return stack.length === 0;
}
exports.isBalancedCurlyBrackets = isBalancedCurlyBrackets;
//# sourceMappingURL=glob.js.map