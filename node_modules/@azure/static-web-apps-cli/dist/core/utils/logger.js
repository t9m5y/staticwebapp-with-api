"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logGiHubIssueMessageAndExit = exports.logRequest = exports.logger = void 0;
const chalk_1 = __importDefault(require("chalk"));
const constants_1 = require("../constants");
const env_1 = require("../env");
const SENSITIVE_KEYS = ["DEPLOYMENT_TOKEN", "SWA_CLI_DEPLOYMENT_TOKEN", "--deployment-token", "deploymentToken"];
exports.logger = {
    _print(prefix, data) {
        if (prefix) {
            console.log(chalk_1.default.dim.gray(`[${prefix}]`), data);
        }
        else {
            console.log(data);
        }
    },
    _traverseObjectProperties(o, fn, indent = "") {
        for (const i in o) {
            if (Array.isArray(o) || (typeof o === "object" && o.hasOwnProperty(i))) {
                if (o[i] !== null && typeof o[i] === "object") {
                    fn(i, null, `${indent}`);
                    this._traverseObjectProperties(o[i], fn, ` ${indent}`);
                }
                else {
                    fn(i, o[i], ` ${indent}`);
                }
            }
        }
    },
    /**
     * Print information data.
     * @param data Either a string or an object to be printed.
     * @param prefix (optional) A prefix to prepend to the printed message.
     */
    info(data, prefix = null) {
        this.silly(data, prefix, "info", chalk_1.default.green);
    },
    /**
     * Print log data.
     * @param data Either a string or an object to be printed.
     * @param prefix (optional) A prefix to prepend to the printed message.
     */
    log(data, prefix = null) {
        this.silly(data, prefix, "log", chalk_1.default.reset);
    },
    /**
     * Print information data.
     * @param data Either a string or an object to be printed.
     * @param prefix (optional) A prefix to prepend to the printed message.
     */
    warn(data, prefix = null) {
        this.silly(data, prefix, "log", chalk_1.default.yellow);
    },
    /**
     * Print error data and optionally exit the CLI instance.
     * @param data Either a string or an object to be printed.
     * @param exit If set to True, the CLI instance will be terminated after printing the error message (code -1).
     */
    error(data, exit = false) {
        const { SWA_CLI_DEBUG } = (0, env_1.swaCLIEnv)();
        if (SWA_CLI_DEBUG === null || SWA_CLI_DEBUG === void 0 ? void 0 : SWA_CLI_DEBUG.includes("silent")) {
            return;
        }
        console.error(chalk_1.default.red("âœ– " + data));
        if (exit) {
            process.exit(1);
        }
    },
    /**
     * Print logs with verbose filter enabled.
     * @param data Either a string or an object to be printed.
     * @param prefix (optional) A prefix to prepend to the printed message.
     * @param debugFilter (optional) A valid debug filter of type DebugFilterLevel.
     * @param color (optional) A valid Chalk color to be used when printing logs.
     */
    silly(data, prefix = null, debugFilter = "silly", color = chalk_1.default.magenta) {
        const { SWA_CLI_DEBUG } = (0, env_1.swaCLIEnv)();
        if (!SWA_CLI_DEBUG || (SWA_CLI_DEBUG === null || SWA_CLI_DEBUG === void 0 ? void 0 : SWA_CLI_DEBUG.includes("silent"))) {
            return;
        }
        const isSensitiveKey = (key) => SENSITIVE_KEYS.some((sensitiveKey) => key.includes(sensitiveKey));
        if ((SWA_CLI_DEBUG === null || SWA_CLI_DEBUG === void 0 ? void 0 : SWA_CLI_DEBUG.includes("silly")) || (SWA_CLI_DEBUG === null || SWA_CLI_DEBUG === void 0 ? void 0 : SWA_CLI_DEBUG.includes(debugFilter))) {
            if (typeof data === "object") {
                this._traverseObjectProperties(data, (key, value, indent) => {
                    if (value !== null) {
                        if (isSensitiveKey(key)) {
                            value = chalk_1.default.yellow("<hidden>");
                        }
                        else if (typeof value === "undefined") {
                            value = chalk_1.default.yellow("<undefined>");
                        }
                        this._print(prefix, color(`${indent}- ${key}: ${chalk_1.default.yellow(value)}`));
                    }
                    else {
                        this._print(prefix, color(`${indent}- ${key}:`));
                    }
                });
            }
            else {
                // data is not an object so just print its value even if it's null or undefined
                this._print(prefix, color(data));
            }
        }
    },
};
/**
 * Print logs related to an HTTP request.
 * @example `GET https://localhost:1234/path 200`
 * @param req Node.js HTTP request object.
 * @param target (optional) A remote target.
 * @param statusCode (optional) An HTTP status code.
 * @param prefix (optional) A prefix to prepend to the printed message.
 */
function logRequest(req, target = "", statusCode = null, prefix = "") {
    var _a;
    let url = (_a = req.url) === null || _a === void 0 ? void 0 : _a.replace(constants_1.CUSTOM_URL_SCHEME, "");
    url = (url === null || url === void 0 ? void 0 : url.startsWith("/")) ? url : `/${url}`;
    const proto = (target === null || target === void 0 ? void 0 : target.startsWith("ws")) ? "ws" : constants_1.SWA_CLI_APP_PROTOCOL;
    const host = `${proto}://${req.headers.host}`;
    prefix = prefix === "" ? "" : ` ${prefix} `;
    if (statusCode) {
        exports.logger.log(`${prefix}${chalk_1.default.cyan(req.method)} ${host}${url} - ${chalk_1.default.green(statusCode)}`);
    }
    else {
        exports.logger.log(chalk_1.default.yellow(`${prefix}${req.method} ${target + url} (proxy)`));
    }
}
exports.logRequest = logRequest;
function logGiHubIssueMessageAndExit() {
    exports.logger.log(``);
    exports.logger.error("If you believe this behavior is unexpected, please raise a GitHub issue at:\n  https://github.com/Azure/static-web-apps-cli/issues/new/choose", true);
}
exports.logGiHubIssueMessageAndExit = logGiHubIssueMessageAndExit;
//# sourceMappingURL=logger.js.map