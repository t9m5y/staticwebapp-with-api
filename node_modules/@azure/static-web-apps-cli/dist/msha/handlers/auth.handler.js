"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isLogoutRequest = exports.isLoginRequest = exports.isAuthRequest = exports.getAuthBlockResponse = exports.handleAuthRequest = void 0;
const core_1 = require("../../core");
const auth_1 = require("../auth");
const error_page_handler_1 = require("./error-page.handler");
async function handleAuthRequest(req, res, matchedRoute, userConfig) {
    core_1.logger.silly(`processing auth request`);
    const statusCode = await (0, auth_1.processAuth)(req, res, matchedRoute === null || matchedRoute === void 0 ? void 0 : matchedRoute.rewrite);
    if (statusCode === 404) {
        core_1.logger.silly(` - auth returned 404`);
        (0, error_page_handler_1.handleErrorPage)(req, res, 404, userConfig === null || userConfig === void 0 ? void 0 : userConfig.responseOverrides);
    }
    (0, core_1.logRequest)(req, "", statusCode);
}
exports.handleAuthRequest = handleAuthRequest;
function getAuthBlockResponse(req, res, userConfig, matchingRoute) {
    switch (matchingRoute.statusCode) {
        case 404:
            return (0, error_page_handler_1.handleErrorPage)(req, res, 404, userConfig === null || userConfig === void 0 ? void 0 : userConfig.responseOverrides);
        case 401:
            return (0, error_page_handler_1.handleErrorPage)(req, res, 401, userConfig === null || userConfig === void 0 ? void 0 : userConfig.responseOverrides);
        case 403:
            return (0, error_page_handler_1.handleErrorPage)(req, res, 403, userConfig === null || userConfig === void 0 ? void 0 : userConfig.responseOverrides);
        default:
            break;
    }
    // Return status code according to route
    res.statusCode = Number(matchingRoute.statusCode) || 404;
    return;
}
exports.getAuthBlockResponse = getAuthBlockResponse;
function isAuthRequest(req) {
    var _a, _b;
    return !!(((_a = req.headers.host) === null || _a === void 0 ? void 0 : _a.includes("identity")) || ((_b = req.url) === null || _b === void 0 ? void 0 : _b.startsWith("/.auth")));
}
exports.isAuthRequest = isAuthRequest;
function isLoginRequest(requestPath) {
    return !!(requestPath === null || requestPath === void 0 ? void 0 : requestPath.startsWith("/.auth/login"));
}
exports.isLoginRequest = isLoginRequest;
function isLogoutRequest(requestPath) {
    return !!(requestPath === null || requestPath === void 0 ? void 0 : requestPath.startsWith("/.auth/logout"));
}
exports.isLogoutRequest = isLogoutRequest;
//# sourceMappingURL=auth.handler.js.map