"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateFunctionTriggers = exports.isFunctionRequest = exports.handleFunctionRequest = void 0;
const chalk_1 = __importDefault(require("chalk"));
const http_proxy_1 = __importDefault(require("http-proxy"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const core_1 = require("../../core");
const constants_1 = require("../../core/constants");
const request_middleware_1 = require("../middlewares/request.middleware");
const proxyApi = http_proxy_1.default.createProxyServer({ autoRewrite: true });
(0, core_1.registerProcessExit)(() => {
    core_1.logger.silly(`killing SWA CLI`);
    proxyApi.close(() => core_1.logger.log("Api proxy stopped."));
    process.exit(0);
});
function injectHeaders(req, host) {
    core_1.logger.silly(`injecting headers to Functions request:`);
    if (!req.getHeader("x-ms-original-url")) {
        req.setHeader("x-ms-original-url", encodeURI(new URL(req.path, host).toString()));
        core_1.logger.silly(` - x-ms-original-url: ${chalk_1.default.yellow(req.getHeader("x-ms-original-url"))}`);
    }
    // generate a fake correlation ID
    req.setHeader("x-ms-request-id", `SWA-CLI-${Math.random().toString(36).substring(2).toUpperCase()}`);
    core_1.logger.silly(` - x-ms-request-id: ${chalk_1.default.yellow(req.getHeader("x-ms-request-id"))}`);
}
function injectClientPrincipalCookies(req) {
    core_1.logger.silly(`injecting client principal to Functions request:`);
    const cookie = req.getHeader("cookie");
    if (cookie && (0, core_1.validateCookie)(cookie)) {
        const user = (0, core_1.decodeCookie)(cookie);
        // Remove claims from client principal to match SWA behaviour. See https://github.com/MicrosoftDocs/azure-docs/issues/86803.
        // The following property deletion can be removed depending on outcome of the above issue.
        if (user) {
            delete user["claims"];
        }
        const buff = Buffer.from(JSON.stringify(user), "utf-8");
        const token = buff.toString("base64");
        req.setHeader("X-MS-CLIENT-PRINCIPAL", token);
        core_1.logger.silly(` - X-MS-CLIENT-PRINCIPAL: ${chalk_1.default.yellow(req.getHeader("X-MS-CLIENT-PRINCIPAL"))}`);
        // locally, we set the JWT bearer token to be the same as the cookie value because we are not using the real auth flow.
        // Note: on production, SWA uses a valid encrypted JWT token!
        if (!req.getHeader("authorization")) {
            req.setHeader("authorization", `Bearer ${token}`);
            core_1.logger.silly(` - Authorization: ${chalk_1.default.yellow(req.getHeader("authorization"))}`);
        }
    }
    else {
        core_1.logger.silly(` - no valid cookie found`);
    }
}
function handleFunctionRequest(req, res) {
    const target = (0, constants_1.SWA_CLI_API_URI)();
    if (constants_1.HAS_API) {
        core_1.logger.silly(`function request detected. Proxying to Azure Functions emulator`);
        core_1.logger.silly(` - target: ${chalk_1.default.yellow(target)}`);
    }
    else {
        core_1.logger.log(`***************************************************************************`);
        core_1.logger.log(`** Functions request detected but no endpoint configuration was found.   **`);
        core_1.logger.log(`** Please use the --api-location option to configure a function endpoint.**`);
        core_1.logger.log(`***************************************************************************`);
    }
    proxyApi.web(req, res, {
        target,
    }, (0, request_middleware_1.onConnectionLost)(req, res, target, "â†³"));
    proxyApi.once("proxyReq", (proxyReq) => {
        injectHeaders(proxyReq, target);
        injectClientPrincipalCookies(proxyReq);
    });
    proxyApi.once("proxyRes", (proxyRes) => {
        core_1.logger.silly(`getting response from remote host`);
        (0, core_1.logRequest)(req, "", proxyRes.statusCode);
    });
    (0, core_1.logRequest)(req, target);
}
exports.handleFunctionRequest = handleFunctionRequest;
function isFunctionRequest(req, rewritePath) {
    let path = rewritePath || req.url;
    return Boolean(path === null || path === void 0 ? void 0 : path.toLowerCase().startsWith(`/api/`));
}
exports.isFunctionRequest = isFunctionRequest;
async function validateFunctionTriggers(url) {
    try {
        const functionsResponse = await (0, node_fetch_1.default)(`${url}/admin/functions`);
        const functions = (await functionsResponse.json());
        const triggers = functions.map((f) => f.config.bindings.find((b) => /trigger$/i.test(b.type))).map((b) => b.type);
        if (triggers.some((t) => !/^httptrigger$/i.test(t))) {
            core_1.logger.error("\nFunction app contains non-HTTP triggered functions. Azure Static Web Apps managed functions only support HTTP functions. To use this function app with Static Web Apps, see 'Bring your own function app'.\n");
        }
    }
    catch (error) {
        core_1.logger.warn("Unable to query functions trigger types from local function app. Skipping.");
        core_1.logger.warn(`Note: Only Http trigger functions are supported. See https://docs.microsoft.com/azure/static-web-apps/apis`);
    }
}
exports.validateFunctionTriggers = validateFunctionTriggers;
//# sourceMappingURL=function.handler.js.map