"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getHeadersForRoute = exports.getDefaultHeaders = exports.getResponseHeaders = exports.updateResponseHeaders = void 0;
const core_1 = require("../../../core");
const constants_1 = require("../../../core/constants");
// // See: https://docs.microsoft.com/azure/static-web-apps/configuration#global-headers
function updateResponseHeaders(res, matchingRouteHeaders) {
    const headers = getResponseHeaders(matchingRouteHeaders);
    for (const header in headers) {
        if (headers[header].includes(constants_1.HEADER_DELETE_KEYWORD)) {
            res.removeHeader(header);
        }
        else {
            res.setHeader(header, headers[header]);
        }
    }
}
exports.updateResponseHeaders = updateResponseHeaders;
function getResponseHeaders(matchingRouteHeaders) {
    const contentResponseHeaders = {};
    if (matchingRouteHeaders == null) {
        return contentResponseHeaders;
    }
    for (const header in matchingRouteHeaders) {
        if (matchingRouteHeaders[header] === "") {
            // in order to avoid mutating the response object here, we add a placeholder
            // the caller function will take care of updating the res object
            contentResponseHeaders[header] = `${constants_1.HEADER_DELETE_KEYWORD} ${contentResponseHeaders[header]}`;
        }
        else {
            contentResponseHeaders[header] = matchingRouteHeaders[header];
        }
    }
    return contentResponseHeaders;
}
exports.getResponseHeaders = getResponseHeaders;
function getDefaultHeaders(etagStr, cacheControl) {
    const headers = {
        //"X-Frame-Options": "SAMEORIGIN" ,
        //"Feature-Policy": "accelerometer 'none'; camera 'self'; geolocation 'none'; gyroscope 'none'; magnetometer 'none'; microphone 'self'; payment 'none'; usb 'none'" ,
        "Strict-Transport-Security": "max-age=10886400; includeSubDomains; preload",
        "Referrer-Policy": "same-origin",
        "X-Content-Type-Options": "nosniff",
        "X-XSS-Protection": "1; mode=block",
        "X-DNS-Prefetch-Control": "off",
    };
    if (cacheControl) {
        headers["Cache-Control"] = cacheControl;
    }
    if (etagStr) {
        headers["ETag"] = etagStr;
    }
    return headers;
}
exports.getDefaultHeaders = getDefaultHeaders;
function getHeadersForRoute(matchingRouteHeaders, globalHeaders) {
    core_1.logger.silly(`constructing headers`);
    core_1.logger.silly({ matchingRouteHeaders });
    core_1.logger.silly({ globalHeaders });
    const cacheControlHeader = `must-revalidate, max-age=${constants_1.CACHE_CONTROL_MAX_AGE}`;
    // Etag header - must be surrounded by ""
    // TODO should we support ETag locally?
    const etagStr = '"SWA-CLI-ETAG"';
    const headers = getDefaultHeaders(etagStr, cacheControlHeader);
    if (globalHeaders) {
        core_1.logger.silly(`checking global headers`);
        core_1.logger.silly(headers);
        for (const defaultHeaderPair in globalHeaders) {
            headers[defaultHeaderPair] = globalHeaders[defaultHeaderPair];
        }
    }
    if (matchingRouteHeaders) {
        core_1.logger.silly(`checking headers for route`);
        core_1.logger.silly(matchingRouteHeaders);
        for (const headerPair in matchingRouteHeaders) {
            headers[headerPair] = matchingRouteHeaders[headerPair];
        }
    }
    return headers;
}
exports.getHeadersForRoute = getHeadersForRoute;
//# sourceMappingURL=headers.js.map