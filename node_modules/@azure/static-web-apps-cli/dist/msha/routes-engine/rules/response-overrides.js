"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.responseOverrides = void 0;
const chalk_1 = __importDefault(require("chalk"));
const logger_1 = require("../../../core/utils/logger");
const constants_1 = require("../../../core/constants");
function tryGetResponseOverrideForStatusCode(responseOverrides, statusCode) {
    return responseOverrides === null || responseOverrides === void 0 ? void 0 : responseOverrides[statusCode];
}
// See: https://docs.microsoft.com/azure/static-web-apps/configuration#response-overrides
function responseOverrides(req, res, responseOverrides) {
    const statusCode = res.statusCode;
    logger_1.logger.silly(`checking response overrides for status code ${chalk_1.default.yellow(statusCode)}`);
    if (constants_1.OVERRIDABLE_ERROR_CODES.includes(statusCode)) {
        const rule = tryGetResponseOverrideForStatusCode(responseOverrides, statusCode);
        if (rule) {
            logger_1.logger.silly(" - found overriden rules...");
            if (rule.statusCode) {
                res.statusCode = rule.statusCode;
                logger_1.logger.silly(` - statusCode: ${chalk_1.default.yellow(statusCode)}`);
            }
            if (rule.redirect) {
                const statusCodeToServe = parseInt(`${rule === null || rule === void 0 ? void 0 : rule.statusCode}`, 10) === 301 ? 301 : 302;
                res.statusCode = statusCodeToServe;
                if (rule.redirect.indexOf(".referrer") !== -1) {
                    // The Production SWA service supports replacing `.referrer` with the current route, so that the user can redirected to a deep link after the authentication flow.
                    // Since the route can contain a path with a query we will want to encode it and the `auth.html` page will need to decode it before changing the page.
                    const redirectWithReferrerReplaced = rule.redirect.replace(".referrer", encodeURIComponent(req.url || ""));
                    res.setHeader("Location", redirectWithReferrerReplaced);
                }
                else {
                    // No `.referrer` param is used, just use user-provided rule redirect as-is
                    res.setHeader("Location", rule.redirect);
                }
                logger_1.logger.silly(` - redirect: ${chalk_1.default.yellow(rule.redirect)}`);
            }
            if (rule.rewrite && req.url !== rule.rewrite) {
                // don't process .auth or api rewrites
                if (rule.rewrite.startsWith("/.auth") || rule.rewrite.startsWith("/api")) {
                    return;
                }
                rule.rewrite = rule.rewrite.replace("/", "");
                req.url = `${constants_1.CUSTOM_URL_SCHEME}${rule.rewrite}`;
                logger_1.logger.silly(` - rewrite: ${chalk_1.default.yellow(req.url)}`);
            }
        }
        else {
            logger_1.logger.silly(" - no rules found.");
        }
    }
}
exports.responseOverrides = responseOverrides;
//# sourceMappingURL=response-overrides.js.map