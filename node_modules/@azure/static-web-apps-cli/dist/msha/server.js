"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const fs_1 = __importDefault(require("fs"));
const http_1 = __importDefault(require("http"));
const http_proxy_1 = __importDefault(require("http-proxy"));
const https_1 = __importDefault(require("https"));
const internal_ip_1 = __importDefault(require("internal-ip"));
const open_1 = __importDefault(require("open"));
const config_1 = require("../config");
const core_1 = require("../core");
const constants_1 = require("../core/constants");
const env_1 = require("../core/env");
const function_handler_1 = require("./handlers/function.handler");
const request_middleware_1 = require("./middlewares/request.middleware");
const { SWA_CLI_PORT, SWA_CLI_APP_SSL } = (0, env_1.swaCLIEnv)();
var proxyApp;
if (SWA_CLI_APP_SSL === "true") {
    proxyApp = http_proxy_1.default.createProxyServer({
        autoRewrite: true,
        agent: new https_1.default.Agent({
            keepAlive: true,
            keepAliveMsecs: 5000,
        }),
    });
    if ((0, core_1.isHttpUrl)((0, constants_1.SWA_CLI_API_URI)())) {
        core_1.logger.warn(`Please make sure you want to hit the http proxy server.`);
    }
}
else if (SWA_CLI_APP_SSL === "false") {
    proxyApp = http_proxy_1.default.createProxyServer({
        autoRewrite: true,
        agent: new http_1.default.Agent({
            keepAlive: true,
            keepAliveMsecs: 5000,
        }),
    });
    if ((0, core_1.isHttpsUrl)((0, constants_1.SWA_CLI_API_URI)())) {
        core_1.logger.error(`Your connection is not secure. Please start the CLI using the flag --ssl. Exiting`, true);
    }
}
// TODO: handle multiple workflow files (see #32)
if (config_1.DEFAULT_CONFIG.githubActionWorkflowLocation) {
    core_1.logger.log(`\nUsing workflow file:\n  ${chalk_1.default.green(config_1.DEFAULT_CONFIG.githubActionWorkflowLocation)}`);
}
const httpsServerOptions = config_1.DEFAULT_CONFIG.ssl && config_1.DEFAULT_CONFIG.sslCert && config_1.DEFAULT_CONFIG.sslKey
    ? {
        cert: config_1.DEFAULT_CONFIG.sslCert.startsWith("-----BEGIN") ? config_1.DEFAULT_CONFIG.sslCert : fs_1.default.readFileSync(config_1.DEFAULT_CONFIG.sslCert, "utf8"),
        key: config_1.DEFAULT_CONFIG.sslKey.startsWith("-----BEGIN") ? config_1.DEFAULT_CONFIG.sslKey : fs_1.default.readFileSync(config_1.DEFAULT_CONFIG.sslKey, "utf8"),
    }
    : null;
function requestHandler(userConfig) {
    return async function (req, res) {
        await (0, request_middleware_1.requestMiddleware)(req, res, proxyApp, userConfig);
    };
}
function onWsUpgrade() {
    return (req, socket, head) => {
        if ((0, constants_1.IS_APP_DEV_SERVER)()) {
            const target = config_1.DEFAULT_CONFIG.outputLocation;
            const remote = `ws://${req.headers.host}`;
            (0, core_1.logRequest)(req, remote);
            proxyApp.ws(req, socket, head, {
                target,
                secure: false,
            }, (0, request_middleware_1.onConnectionLost)(req, socket, target));
            proxyApp.once("proxyRes", (proxyRes) => {
                core_1.logger.silly(`getting response from dev server`);
                (0, core_1.logRequest)(req, remote, proxyRes.statusCode);
            });
        }
    };
}
function onServerStart(server, socketConnection) {
    return () => {
        if ((0, constants_1.IS_APP_DEV_SERVER)()) {
            // prettier-ignore
            core_1.logger.log(`\nUsing dev server for static content:\n` +
                `  ${chalk_1.default.green(config_1.DEFAULT_CONFIG.outputLocation)}`);
        }
        else {
            // prettier-ignore
            core_1.logger.log(`\nServing static content:\n` +
                `  ${chalk_1.default.green(config_1.DEFAULT_CONFIG.outputLocation)}`);
        }
        if (config_1.DEFAULT_CONFIG.apiLocation) {
            if ((0, constants_1.IS_API_DEV_SERVER)()) {
                // prettier-ignore
                core_1.logger.log(`\nUsing dev server for API:\n` +
                    `  ${chalk_1.default.green(config_1.DEFAULT_CONFIG.apiLocation)}`);
            }
            else {
                // prettier-ignore
                core_1.logger.log(`\nServing API:\n` +
                    `  ${chalk_1.default.green(config_1.DEFAULT_CONFIG.apiLocation)}`);
            }
        }
        // note: this string must not change. It is used by the VS Code extension.
        // see: https://github.com/Azure/static-web-apps-cli/issues/124
        //--------------------------------------------------------------------------------
        const serverAddress = (0, core_1.address)(config_1.DEFAULT_CONFIG.host, Number(SWA_CLI_PORT), constants_1.SWA_CLI_APP_PROTOCOL);
        let logMessage = `\nAzure Static Web Apps emulator started at ${chalk_1.default.green(serverAddress)}. Press CTRL+C to exit.\n\n`;
        //--------------------------------------------------------------------------------
        core_1.logger.log(logMessage);
        if (config_1.DEFAULT_CONFIG.open) {
            (0, open_1.default)(serverAddress);
        }
        server.on("upgrade", onWsUpgrade());
        (0, core_1.registerProcessExit)(() => {
            socketConnection === null || socketConnection === void 0 ? void 0 : socketConnection.end(() => core_1.logger.info("WebSocket connection closed."));
            server.close(() => core_1.logger.log("Server stopped."));
            proxyApp.close(() => core_1.logger.log("App proxy stopped."));
            core_1.logger.info("Azure Static Web Apps emulator shutting down...");
            process.exit(0);
        });
    };
}
// start SWA proxy server
(async () => {
    let socketConnection;
    const localIpAdress = await internal_ip_1.default.v4();
    // load user custom rules if running in local mode (non-dev server)
    let userConfig;
    // load user configuration even when using a dev server
    userConfig = await (0, request_middleware_1.handleUserConfig)(config_1.DEFAULT_CONFIG.swaConfigLocation || config_1.DEFAULT_CONFIG.appLocation);
    const createServer = () => {
        if (config_1.DEFAULT_CONFIG.ssl && httpsServerOptions !== null) {
            return https_1.default.createServer(httpsServerOptions, requestHandler(userConfig));
        }
        return http_1.default.createServer(requestHandler(userConfig));
    };
    if ((0, constants_1.IS_APP_DEV_SERVER)()) {
        await (0, core_1.validateDevServerConfig)(config_1.DEFAULT_CONFIG.outputLocation, config_1.DEFAULT_CONFIG.devserverTimeout);
    }
    if (constants_1.HAS_API) {
        await (0, core_1.validateDevServerConfig)((0, constants_1.SWA_CLI_API_URI)(), config_1.DEFAULT_CONFIG.devserverTimeout);
        await (0, function_handler_1.validateFunctionTriggers)((0, constants_1.SWA_CLI_API_URI)());
    }
    const server = createServer();
    server.listen(Number(SWA_CLI_PORT), (0, core_1.hostnameToIpAdress)(config_1.DEFAULT_CONFIG.host), onServerStart(server, socketConnection));
    server.listen(Number(SWA_CLI_PORT), localIpAdress);
})();
//# sourceMappingURL=server.js.map